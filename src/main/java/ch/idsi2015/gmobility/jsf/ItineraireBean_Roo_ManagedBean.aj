// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ch.idsi2015.gmobility.jsf;

import ch.idsi2015.gmobility.domain.Itineraire;
import ch.idsi2015.gmobility.jsf.ItineraireBean;
import ch.idsi2015.gmobility.jsf.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect ItineraireBean_Roo_ManagedBean {
    
    declare @type: ItineraireBean: @ManagedBean(name = "itineraireBean");
    
    declare @type: ItineraireBean: @SessionScoped;
    
    private String ItineraireBean.name = "Itineraires";
    
    private Itineraire ItineraireBean.itineraire;
    
    private List<Itineraire> ItineraireBean.allItineraires;
    
    private boolean ItineraireBean.dataVisible = false;
    
    private List<String> ItineraireBean.columns;
    
    private HtmlPanelGrid ItineraireBean.createPanelGrid;
    
    private HtmlPanelGrid ItineraireBean.editPanelGrid;
    
    private HtmlPanelGrid ItineraireBean.viewPanelGrid;
    
    private boolean ItineraireBean.createDialogVisible = false;
    
    @PostConstruct
    public void ItineraireBean.init() {
        columns = new ArrayList<String>();
        columns.add("trajet");
    }
    
    public String ItineraireBean.getName() {
        return name;
    }
    
    public List<String> ItineraireBean.getColumns() {
        return columns;
    }
    
    public List<Itineraire> ItineraireBean.getAllItineraires() {
        return allItineraires;
    }
    
    public void ItineraireBean.setAllItineraires(List<Itineraire> allItineraires) {
        this.allItineraires = allItineraires;
    }
    
    public String ItineraireBean.findAllItineraires() {
        allItineraires = Itineraire.findAllItineraires();
        dataVisible = !allItineraires.isEmpty();
        return null;
    }
    
    public boolean ItineraireBean.isDataVisible() {
        return dataVisible;
    }
    
    public void ItineraireBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid ItineraireBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void ItineraireBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid ItineraireBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void ItineraireBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid ItineraireBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void ItineraireBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid ItineraireBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel trajetCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        trajetCreateOutput.setFor("trajetCreateInput");
        trajetCreateOutput.setId("trajetCreateOutput");
        trajetCreateOutput.setValue("Trajet:");
        htmlPanelGrid.getChildren().add(trajetCreateOutput);
        
        InputText trajetCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        trajetCreateInput.setId("trajetCreateInput");
        trajetCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itineraireBean.itineraire.trajet}", String.class));
        trajetCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(trajetCreateInput);
        
        Message trajetCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        trajetCreateInputMessage.setId("trajetCreateInputMessage");
        trajetCreateInputMessage.setFor("trajetCreateInput");
        trajetCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(trajetCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ItineraireBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel trajetEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        trajetEditOutput.setFor("trajetEditInput");
        trajetEditOutput.setId("trajetEditOutput");
        trajetEditOutput.setValue("Trajet:");
        htmlPanelGrid.getChildren().add(trajetEditOutput);
        
        InputText trajetEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        trajetEditInput.setId("trajetEditInput");
        trajetEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itineraireBean.itineraire.trajet}", String.class));
        trajetEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(trajetEditInput);
        
        Message trajetEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        trajetEditInputMessage.setId("trajetEditInputMessage");
        trajetEditInputMessage.setFor("trajetEditInput");
        trajetEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(trajetEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid ItineraireBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText trajetLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        trajetLabel.setId("trajetLabel");
        trajetLabel.setValue("Trajet:");
        htmlPanelGrid.getChildren().add(trajetLabel);
        
        HtmlOutputText trajetValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        trajetValue.setId("trajetValue");
        trajetValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{itineraireBean.itineraire.trajet}", String.class));
        htmlPanelGrid.getChildren().add(trajetValue);
        
        return htmlPanelGrid;
    }
    
    public Itineraire ItineraireBean.getItineraire() {
        if (itineraire == null) {
            itineraire = new Itineraire();
        }
        return itineraire;
    }
    
    public void ItineraireBean.setItineraire(Itineraire itineraire) {
        this.itineraire = itineraire;
    }
    
    public String ItineraireBean.onEdit() {
        return null;
    }
    
    public boolean ItineraireBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void ItineraireBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String ItineraireBean.displayList() {
        createDialogVisible = false;
        findAllItineraires();
        return "itineraire";
    }
    
    public String ItineraireBean.displayCreateDialog() {
        itineraire = new Itineraire();
        createDialogVisible = true;
        return "itineraire";
    }
    
    public String ItineraireBean.persist() {
        String message = "";
        if (itineraire.getId() != null) {
            itineraire.merge();
            message = "message_successfully_updated";
        } else {
            itineraire.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Itineraire");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllItineraires();
    }
    
    public String ItineraireBean.delete() {
        itineraire.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Itineraire");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllItineraires();
    }
    
    public void ItineraireBean.reset() {
        itineraire = null;
        createDialogVisible = false;
    }
    
    public void ItineraireBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
